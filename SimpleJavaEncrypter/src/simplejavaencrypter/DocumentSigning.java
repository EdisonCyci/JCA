/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simplejavaencrypter;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author ECyci
 */
public class DocumentSigning extends javax.swing.JFrame {
private Cipher masterChiper;
private PublicKey pub;
private PrivateKey priv;
private SecretKey masterKey;
    /**
     * Creates new form DocumentSigning
     */
    public DocumentSigning() {
        initComponents();
    }
    
        public DocumentSigning(SecretKey Key) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {
        this.masterChiper = Cipher.getInstance("DES");
        this.masterKey= Key;
        this.masterChiper.init(Cipher.ENCRYPT_MODE, masterKey);
        initComponents();
    }
        
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filePathField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        sigFileBTN = new javax.swing.JButton();
        genKeyPairBTN = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        chKeyBTN = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        chFileBTN = new javax.swing.JButton();
        keyPathField = new javax.swing.JTextField();
        storePrivKey = new javax.swing.JButton();
        storePubKey = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        chDesFileBTN = new javax.swing.JButton();
        dFilePathField = new javax.swing.JTextField();

        filePathField.setEditable(false);
        filePathField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        filePathField.setText("No File Selected");
        filePathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathFieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Gen KeyPair & Store In File");

        sigFileBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        sigFileBTN.setText("Sign Selected File");
        sigFileBTN.setToolTipText("Make Sure Both an Encryption Key and a File are Selected");
        sigFileBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sigFileBTNActionPerformed(evt);
            }
        });

        genKeyPairBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        genKeyPairBTN.setText("Gen Key Pair");
        genKeyPairBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeyPairBTNActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("Use Key From File");

        chKeyBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        chKeyBTN.setText("Choose Priv Key");
        chKeyBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chKeyBTNActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel3.setText("Choose File to Sign");

        chFileBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        chFileBTN.setText("Choose File");
        chFileBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chFileBTNActionPerformed(evt);
            }
        });

        keyPathField.setEditable(false);
        keyPathField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        keyPathField.setText("No Key Selected");
        keyPathField.setToolTipText("");

        storePrivKey.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        storePrivKey.setText("Store Priv Key");
        storePrivKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storePrivKeyActionPerformed(evt);
            }
        });

        storePubKey.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        storePubKey.setText("Store Pub Key");
        storePubKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storePubKeyActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel4.setText("Choose Destiantion File");

        chDesFileBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        chDesFileBTN.setText("Choose Destination File");
        chDesFileBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chDesFileBTNActionPerformed(evt);
            }
        });

        dFilePathField.setEditable(false);
        dFilePathField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        dFilePathField.setText("No File Selected");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chDesFileBTN))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1)
                                .addComponent(genKeyPairBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(chFileBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chKeyBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(storePrivKey)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(storePubKey))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(keyPathField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                                    .addComponent(filePathField, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(136, 136, 136)
                            .addComponent(sigFileBTN))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel4))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(dFilePathField, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genKeyPairBTN)
                    .addComponent(storePrivKey)
                    .addComponent(storePubKey))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(keyPathField)
                    .addComponent(chKeyBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filePathField)
                    .addComponent(chFileBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chDesFileBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(sigFileBTN)
                        .addGap(51, 51, 51))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dFilePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filePathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePathFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filePathFieldActionPerformed

    private void chKeyBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chKeyBTNActionPerformed
        JFileChooser chooseKey = new JFileChooser();
        chooseKey.showOpenDialog(null);
        File f = chooseKey.getSelectedFile();
        String keyPath = f.getAbsolutePath();
        keyPathField.setText(keyPath);
    }//GEN-LAST:event_chKeyBTNActionPerformed

    private void chFileBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chFileBTNActionPerformed
        JFileChooser chooseFile = new JFileChooser();
        chooseFile.showOpenDialog(null);
        File f = chooseFile.getSelectedFile();
        String keyPath = f.getAbsolutePath();
        filePathField.setText(keyPath);
    }//GEN-LAST:event_chFileBTNActionPerformed

    private void sigFileBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sigFileBTNActionPerformed
        if(keyPathField.getText()!="No Key Selected"&&filePathField.getText()!="No File Selected"&&dFilePathField.getText()!="No File Selected")
        {
            try {               
                FileInputStream keyfis = new FileInputStream(keyPathField.getText());
                ObjectInputStream in = null;
                in = new ObjectInputStream(keyfis);               
                SealedObject so = ((SealedObject) in.readObject());
                in.close();
                keyfis.close();                
                Cipher c = Cipher.getInstance("DES");
                c.init(Cipher.DECRYPT_MODE, this.masterKey);
                Signature dsa = Signature.getInstance("SHA1withDSA", "SUN");
                this.priv = (PrivateKey)so.getObject(c);
                dsa.initSign(priv);
                FileInputStream fis = new FileInputStream(filePathField.getText());
                BufferedInputStream bufin = new BufferedInputStream(fis);
                byte[] buffer = new byte[1024];
                int len;
                while ((len = bufin.read(buffer)) >= 0) {
                    dsa.update(buffer, 0, len);
                }
                bufin.close();
                byte[] realSig = dsa.sign();

                /* save the signature in a file */
                FileOutputStream sigfos = new FileOutputStream(dFilePathField.getText());
                sigfos.write(realSig);
                sigfos.close();
                
                JOptionPane.showMessageDialog(this, "Signature was Successfully Created!");
                
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchProviderException ex) {
                Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SignatureException ex) {
                Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "You MUST choose and ECRYPTION KEY, a FILE and a DESTINATION FILE!");
        }
    }//GEN-LAST:event_sigFileBTNActionPerformed

    private void chDesFileBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chDesFileBTNActionPerformed
        JFileChooser chooseFile = new JFileChooser();
        chooseFile.showOpenDialog(null);
        File f = chooseFile.getSelectedFile();
        String keyPath = f.getAbsolutePath();
        dFilePathField.setText(keyPath);
    }//GEN-LAST:event_chDesFileBTNActionPerformed

    private void storePrivKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storePrivKeyActionPerformed
try{  
        JFileChooser chooseFile = new JFileChooser();
        chooseFile.showOpenDialog(null);
        File f = chooseFile.getSelectedFile();
        String keyPath = f.getAbsolutePath();
        Cipher c = Cipher.getInstance("DES");
        c.init(Cipher.ENCRYPT_MODE, this.masterKey);
        SealedObject so = new SealedObject(this.priv, c);
        FileOutputStream keyfos;
        keyfos = new FileOutputStream(keyPath);
        ObjectOutputStream out = null;
        out = new ObjectOutputStream(keyfos);
        out.writeObject(so);
        out.close();
        keyfos.close();

            JOptionPane.showMessageDialog(this, "Private Key was Stored and Encrypted Successfully!");
            
    } catch (FileNotFoundException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IllegalBlockSizeException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InvalidKeyException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    } catch (NoSuchAlgorithmException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    } catch (NoSuchPaddingException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }//GEN-LAST:event_storePrivKeyActionPerformed

    private void storePubKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storePubKeyActionPerformed
try{  
        JFileChooser chooseFile = new JFileChooser();
        chooseFile.showOpenDialog(null);
        File f = chooseFile.getSelectedFile();
        String keyPath = f.getAbsolutePath();
        byte[] key = this.pub.getEncoded();
        byte[] encKey = masterChiper.doFinal(key);
        FileOutputStream keyfos;  
        keyfos = new FileOutputStream(keyPath);
        keyfos.write(encKey);
        keyfos.close();
        /*
        FileInputStream fis = new FileInputStream(keyPath);
        CipherInputStream cis = new CipherInputStream(fis, masterChiper);
        FileOutputStream fos = new FileOutputStream(keyPath);
            byte[] buffer = new byte[8];
            int i = cis.read(buffer);
            
            while ( i != -1)
            {
                fos.write(buffer);
                i = cis.read(buffer);
            }
            
            fis.close();
            cis.close();
            fos.close();
            */
            JOptionPane.showMessageDialog(this, "Public Key was Stored and Encrypted Successfully!");
            
    } catch (FileNotFoundException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IllegalBlockSizeException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    } catch (BadPaddingException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_storePubKeyActionPerformed

    private void genKeyPairBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeyPairBTNActionPerformed
    try {
        KeyPairGenerator keygen= KeyPairGenerator.getInstance("DSA");
        SecureRandom random = SecureRandom.getInstance("SHA1PRNG");        
        keygen.initialize(1024, random);
        KeyPair kp = keygen.generateKeyPair();        
        this.pub = kp.getPublic();
        this.priv = kp.getPrivate();
        
        JOptionPane.showMessageDialog(this, "Key Pair was Generated Successfully!");
        
    } catch (NoSuchAlgorithmException ex) {
        Logger.getLogger(DocumentSigning.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_genKeyPairBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DocumentSigning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DocumentSigning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DocumentSigning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DocumentSigning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DocumentSigning().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chDesFileBTN;
    private javax.swing.JButton chFileBTN;
    private javax.swing.JButton chKeyBTN;
    private javax.swing.JTextField dFilePathField;
    private javax.swing.JTextField filePathField;
    private javax.swing.JButton genKeyPairBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField keyPathField;
    private javax.swing.JButton sigFileBTN;
    private javax.swing.JButton storePrivKey;
    private javax.swing.JButton storePubKey;
    // End of variables declaration//GEN-END:variables
}
