/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simplejavaencrypter;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import static javax.crypto.Cipher.ENCRYPT_MODE;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author ECyci
 */
public class SigVeryfier extends javax.swing.JFrame {
private Cipher masterChiper;
private SecretKey masterKey;
    /**
     * Creates new form NewJFrame
     */
    public SigVeryfier() {
        initComponents();
    }
    
    public SigVeryfier(SecretKey Key) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {
        this.masterChiper = Cipher.getInstance("DES");
        this.masterKey = Key;
        this.masterChiper.init(Cipher.DECRYPT_MODE, Key);
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filePathField = new javax.swing.JTextField();
        verFileBTN = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        chKeyBTN = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        chFileBTN = new javax.swing.JButton();
        keyPathField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        chSigBTN = new javax.swing.JButton();
        sigPathField = new javax.swing.JTextField();

        filePathField.setEditable(false);
        filePathField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        filePathField.setText("No File Selected");

        verFileBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        verFileBTN.setText("Verify File Signature");
        verFileBTN.setToolTipText("Make Sure Both an Encryption Key and a File are Selected");
        verFileBTN.setName("DecryptFileBTN"); // NOI18N
        verFileBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verFileBTNActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("Use Key From File");
        jLabel2.setToolTipText("");
        jLabel2.setName(""); // NOI18N

        chKeyBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        chKeyBTN.setText("Choose Key");
        chKeyBTN.setName("ChooseKeyBTN"); // NOI18N
        chKeyBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chKeyBTNActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel3.setText("Choose File to Verify");

        chFileBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        chFileBTN.setText("Choose File");
        chFileBTN.setName("ChooseFileBTN"); // NOI18N
        chFileBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chFileBTNActionPerformed(evt);
            }
        });

        keyPathField.setEditable(false);
        keyPathField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        keyPathField.setText("No Key Selected");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Choose Signature");

        chSigBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        chSigBTN.setText("Choose Sig");
        chSigBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chSigBTNActionPerformed(evt);
            }
        });

        sigPathField.setEditable(false);
        sigPathField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        sigPathField.setText("No Signature Selected");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(verFileBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(chSigBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chFileBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chKeyBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(keyPathField, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                            .addComponent(filePathField)
                            .addComponent(sigPathField))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(keyPathField)
                    .addComponent(chKeyBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chSigBTN)
                    .addComponent(sigPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chFileBTN)
                    .addComponent(filePathField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(verFileBTN)
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void verFileBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verFileBTNActionPerformed
        if(keyPathField.getText()!="No Key Selected"&&filePathField.getText()!="No File Selected"&&sigPathField.getText()!="No Signature Selected")
        {
            FileInputStream keyfis;
            try {
                keyfis = new FileInputStream(keyPathField.getText());            
                byte[] encKey = new byte[keyfis.available()];
                keyfis.read(encKey);
                keyfis.close();
                
                Cipher deChipher =Cipher.getInstance("DES");
                deChipher.init(Cipher.DECRYPT_MODE, masterKey);//init a decipher so we can decrypt the key with the master key
                byte[] key = new byte[8];
                key =  deChipher.doFinal(encKey);

                X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(key);
                KeyFactory keyFactory = KeyFactory.getInstance("DSA", "SUN");
                PublicKey pub = keyFactory.generatePublic(pubKeySpec);

                FileInputStream sigfis = new FileInputStream(sigPathField.getText());
                byte[] sigToVerify = new byte[sigfis.available()];
                sigfis.read(sigToVerify);
                sigfis.close();

                Signature sig = Signature.getInstance("SHA1withDSA", "SUN");
                sig.initVerify(pub);

                FileInputStream datafis = new FileInputStream(filePathField.getText());
                BufferedInputStream bufin = new BufferedInputStream(datafis);
                byte[] buffer = new byte[1024];
                int len;
                while (bufin.available() != 0) 
                {
                    len = bufin.read(buffer);
                    sig.update(buffer, 0, len);
                };
                bufin.close();
                
                boolean validSignature = sig.verify(sigToVerify);
                JOptionPane.showMessageDialog(this, "signature verifies: " + validSignature);
            
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SigVeryfier.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(SigVeryfier.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(SigVeryfier.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchProviderException ex) {
                Logger.getLogger(SigVeryfier.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeySpecException ex) {
                Logger.getLogger(SigVeryfier.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(SigVeryfier.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SignatureException ex) {
                Logger.getLogger(SigVeryfier.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(SigVeryfier.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(SigVeryfier.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(SigVeryfier.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "You must choose a signature, a file and a KEY!");
        }
    }//GEN-LAST:event_verFileBTNActionPerformed

    private void chKeyBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chKeyBTNActionPerformed
        JFileChooser chooseKey = new JFileChooser();
        chooseKey.showOpenDialog(null);
        File f = chooseKey.getSelectedFile();
        String keyPath = f.getAbsolutePath();
        keyPathField.setText(keyPath);
    }//GEN-LAST:event_chKeyBTNActionPerformed

    private void chSigBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chSigBTNActionPerformed
        JFileChooser chooseFile = new JFileChooser();
        chooseFile.showOpenDialog(null);
        File f = chooseFile.getSelectedFile();
        String keyPath = f.getAbsolutePath();
        sigPathField.setText(keyPath);  
    }//GEN-LAST:event_chSigBTNActionPerformed

    private void chFileBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chFileBTNActionPerformed
        JFileChooser chooseFile = new JFileChooser();
        chooseFile.showOpenDialog(null);
        File f = chooseFile.getSelectedFile();
        String keyPath = f.getAbsolutePath();
        filePathField.setText(keyPath);
    }//GEN-LAST:event_chFileBTNActionPerformed
         
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SigVeryfier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SigVeryfier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SigVeryfier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SigVeryfier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SigVeryfier().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chFileBTN;
    private javax.swing.JButton chKeyBTN;
    private javax.swing.JButton chSigBTN;
    private javax.swing.JTextField filePathField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField keyPathField;
    private javax.swing.JTextField sigPathField;
    private javax.swing.JButton verFileBTN;
    // End of variables declaration//GEN-END:variables
}
