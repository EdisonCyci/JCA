/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simplejavaencrypter;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author ECyci
 */
public class ImportEncryptionKey extends javax.swing.JFrame {
    private Cipher masterChiper;
    /**
     * Creates new form ImportEncryptionKey
     */
    public ImportEncryptionKey() {
        initComponents();
    }
    
    public ImportEncryptionKey(SecretKey Key) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException{
        this.masterChiper = Cipher.getInstance("DES");
        this.masterChiper.init(Cipher.ENCRYPT_MODE, Key);
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        chKeyBTN = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        chFileBTN = new javax.swing.JButton();
        keyPathField = new javax.swing.JTextField();
        filePathField = new javax.swing.JTextField();
        impKeyBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Choose Key to Import");

        chKeyBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        chKeyBTN.setText("ChooseKey");
        chKeyBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chKeyBTNActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("Choose File toImport Key to");

        chFileBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        chFileBTN.setText("ChooseFile");
        chFileBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chFileBTNActionPerformed(evt);
            }
        });

        keyPathField.setEditable(false);
        keyPathField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        keyPathField.setText("No File Selected");

        filePathField.setEditable(false);
        filePathField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        filePathField.setText("No File Selected");

        impKeyBTN.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        impKeyBTN.setText("Import Key");
        impKeyBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impKeyBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chFileBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                            .addComponent(chKeyBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filePathField, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                            .addComponent(keyPathField))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(impKeyBTN)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chKeyBTN)
                    .addComponent(keyPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chFileBTN)
                    .addComponent(filePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(impKeyBTN)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chKeyBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chKeyBTNActionPerformed
        JFileChooser chooseKey = new JFileChooser();
        chooseKey.showOpenDialog(null);
        File f = chooseKey.getSelectedFile();
        String keyPath = f.getAbsolutePath();
        keyPathField.setText(keyPath);
    }//GEN-LAST:event_chKeyBTNActionPerformed

    private void chFileBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chFileBTNActionPerformed
        JFileChooser chooseFile = new JFileChooser();
        chooseFile.showOpenDialog(null);
        File f = chooseFile.getSelectedFile();
        String keyPath = f.getAbsolutePath();
        filePathField.setText(keyPath);
    }//GEN-LAST:event_chFileBTNActionPerformed

    private void impKeyBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impKeyBTNActionPerformed
        if(keyPathField.getText()!="No File Selected"&&filePathField.getText()!="No File Selected")
        {
            try {
                    FileInputStream fis = new FileInputStream(keyPathField.getText());
                    CipherInputStream cis = new CipherInputStream(fis, masterChiper);
                    FileOutputStream fos = new FileOutputStream(filePathField.getText());
                    byte[] buffer = new byte[8];
                    int i = cis.read(buffer);
            
                    while ( i != -1)
                    {
                        fos.write(buffer);
                        i = cis.read(buffer);
                    }

                    fis.close();
                    cis.close();
                    fos.close();

                JOptionPane.showMessageDialog(this, "Key was Imported Successfully to selected file!\nIMPORTANT:\nRemember to export Keys if you want to share them!");

            } catch (FileNotFoundException ex) {
                Logger.getLogger(ExportEncryptionKey.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ExportEncryptionKey.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "You MUST choose an IMPORTED ECRYPTION KEY and a DESTINATION FILE!");
        }
    }//GEN-LAST:event_impKeyBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportEncryptionKey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportEncryptionKey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportEncryptionKey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportEncryptionKey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImportEncryptionKey().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chFileBTN;
    private javax.swing.JButton chKeyBTN;
    private javax.swing.JTextField filePathField;
    private javax.swing.JButton impKeyBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField keyPathField;
    // End of variables declaration//GEN-END:variables
}
